#include<iostream>
#include<ctime>
#include<cstdlib>
using namespace std;

int main()
{
	int i=0, j=0, arr[35], ZeroIsland=0, m=0, n=0, Visited[20], FirstZero[20], k=0, l=0;
	int matris[7][5]={{1,1,0,0,0},{0,0,1,1,1},{0,0,1,0,0},{0,1,1,0,0},{1,0,1,0,1},{1,0,1,1,1},{0,0,1,0,0}};

	
	for (i=0; i<7; i++) 
	{
		for (j=0; j<5; j++)
		{
			cout<<matris[i][j]<<"  ";
		}
		cout<<endl;
	}
	cout<<endl;
		for (i=0; i<7; i++) // Matrisin satırlarını temsil ediyor
	{
		for (j=0; j<5; j++) // Matrisin sütunlarını temsil ediyor
		{
			if (matris[i][j]==0) // Matirin i'nci satırında ve j'inci sütununda 0 varsa komut işleme giriyor
			{	
				if (i==0 && j==0 && matris[i][j]==0) // Matrisin ilk elemanı için özel bir durum vardır çünkü yukarısına veya soluna baktığımız zaman hata ile karşılaşırız
				{									 // Bu yüzden eğer ilk eleman 0' ise sayacımızı arttırıyoruz
					ZeroIsland++;
					continue;
				}
				else if (i==0) // Burada i=0 iken "i-1"deki yere bakamayacağımız için özel bir durum belirttim
				{
					if (matris[i][j-1]==0) // Eğer bir önceki sütunda 0 var ise hiç bir şey yapmadan döngüyü bir adım ilerletiyor
						{
						Visited[n]=(10*i)+j;
						n++;
						continue;
						}
				}
				else if (j==0) // Eğer i!=0 ise ve j=0 ise "j-1"deki yere bakamayız
				{
					if (matris[i-1][j]==0) // Eğer bir üstteki satırda 0 var ise döngüyü bir adım ilerletiyor
						{
						Visited[n]=(10*i)+j;
						n++;
						continue;
						}
				}
				else if (i!=0 && j!=0) // i ve j 0'a eşit değilse hem bir önceki sütuna hem de bir üstteki satıra bakabiliriz
				{
					if (matris[i-1][j]==0 || matris[i][j-1]==0) // Eğer bir önceki sütunda veya bir üstteki satırda 0 var ise döngüyü bir adım ilerlet
						{
						Visited[n]=(10*i)+j;
						n++;
						continue;}
				}

				FirstZero[m]=(10*i)+j;
				m++;
				ZeroIsland++; // Eğer yukarıdaki durumlardan hiç biri gerçekleşmiyor ise sayacımızı arttırıyoruz

				
				
			}
		}
	}
	cout<<endl<<"The place of the beginning of the zero island in the matrix: "<<endl;
	for (k=0; k<m; k++)
		cout<<"["<<FirstZero[k]/10<<","<<FirstZero[k]%10<<"]  ";
	cout<<endl;
	cout<<endl;
	cout<<endl<<"The position of zeros in the zero island in the matrix: "<<endl;
	for (k=0; k<n; k++)
		cout<<"["<<Visited[k]/10<<","<<Visited[k]%10<<"]  ";
	cout<<endl;
	cout<<endl<<"The place of zero in the matrix that restarts itself on the island of zero:"<<endl;
	for (k=0; k<n; k++)
	{
		i=Visited[k]/10;
		j=Visited[k]%10;
		if (i!=0 && j!=0)
		{
			if (matris[i-1][j-1]==1 && matris[i-1][j]==0 && matris[i][j-1]==0)
			{
				cout<<"["<<i<<","<<j-1<<"]  "<<endl;
				ZeroIsland--;
			}
		}
	}
// İlk döngü sadece yukarı ve sola bakıyordu ve eğer oralarda 0 var ise döngüyü atlatıyordu
// İlk döngü sıfır adası hem yukarıdan hemde soldan başladığı zaman fazladan sıfır adası gösteriyordu
// Yukarıdaki döngü ise bunun kontrolünü sağlıyor ve böyle bir durum var ise sayacımızı azaltıyor
	
	cout<<endl<<"Total zero island = "<<ZeroIsland;	
}
